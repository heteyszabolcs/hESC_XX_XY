fc = fread("../results/H3K27Ac_XX_XY_2kbp_mscaled_fc_table.tsv")
fc = fc %>% separate(V1, into = c("chr", "start", "end"), sep = "_")
annot = annot %>%
select(ChromHMM = `PeakID (cmd=annotatePeaks.pl ../results/H3K27Ac_XX_XY_2kbp_mscaled_chromhmm_int.bed hg38)`,
Chr, Start, End, `Distance to TSS`, `Gene Name`) %>%
mutate(Chr = as.character(Chr), Start = as.character(Start), End = as.character(End))
annot = fread("../results/H3K27Ac_XX_XY_2kbp_mscaled_chromhmm_int_annot.tsv")
fc = fread("../results/H3K27Ac_XX_XY_2kbp_mscaled_fc_table.tsv")
annot = annot %>%
select(ChromHMM = `PeakID (cmd=annotatePeaks.pl ../results/H3K27Ac_XX_XY_2kbp_mscaled_chromhmm_int.bed hg38)`,
Chr, Start, End, `Distance to TSS`, `Gene Name`) %>%
mutate(Chr = as.character(Chr), Start = as.character(Start), End = as.character(End)) %>%
mutate(region = paste(Chr, Start, End, collapse = "_"))
annot = annot %>%
select(ChromHMM = `PeakID (cmd=annotatePeaks.pl ../results/H3K27Ac_XX_XY_2kbp_mscaled_chromhmm_int.bed hg38)`,
Chr, Start, End, `Distance to TSS`, `Gene Name`) %>%
mutate(Chr = as.character(Chr), Start = as.character(Start), End = as.character(End)) %>%
unite("region", Chr:End, sep = "_", remove = TRUE)
annot = fread("../results/H3K27Ac_XX_XY_2kbp_mscaled_chromhmm_int_annot.tsv")
annot = annot %>%
select(ChromHMM = `PeakID (cmd=annotatePeaks.pl ../results/H3K27Ac_XX_XY_2kbp_mscaled_chromhmm_int.bed hg38)`,
Chr, Start, End, `Distance to TSS`, `Gene Name`) %>%
mutate(Chr = as.character(Chr), Start = as.character(Start), End = as.character(End)) %>%
unite("region", Chr:End, sep = "_", remove = TRUE)
View(annot)
annot = fread("../results/H3K27Ac_XX_XY_2kbp_mscaled_chromhmm_int_annot.tsv")
View(annot)
fc = fread("../results/H3K27Ac_XX_XY_2kbp_mscaled_fc_table.bed")
View(fc)
View(fc)
fc = fread("../results/H3K27Ac_XX_XY_2kbp_mscaled_fc_table.tsv")
fc_bed = fread("../results/H3K27Ac_XX_XY_2kbp_mscaled_fc_table.bed")
View(fc)
library("edgeR")
help(calcNormFactors)
library("tidyverse")
library("data.table")
library("wigglescout")
library("glue")
bigwig_path = "../data/bigwig/"
chrom_path = "../data/chrom_info.txt"
bigwigs = list.files(bigwig_path, full.names = TRUE)
chrom_info = fread(chrom_path)
# collect epigenetic marks
bigwigs_marks = bigwigs[grep("_pooled.hg38.unscaled.bw", bigwigs)]
# collect inputs
bigwigs_inputs = bigwigs[grep("Input", bigwigs)]
bigwigs_inputs = bigwigs_inputs[grep("pooled", bigwigs_inputs)]
bigwigs_all = c(bigwigs_marks, bigwigs_inputs)
marks = character()
samples = character()
pools = character()
filenames = character()
for(bigwig in bigwigs_all) {
name = str_split(bigwig, bigwig_path)[[1]][2]
marks = c(marks, str_split(name, "_")[[1]][1])
samples = c(samples, str_split(name, "_")[[1]][2])
pools = c(pools, str_split(str_split(name, "_")[[1]][3], "\\.")[[1]][1])
filenames = c(filenames, bigwig)
}
info = tibble("mark" = marks, "sample" = samples, "pool" = pools, "filename" = filenames)
info = info %>% left_join(., chrom_info, by = c("sample" = "sample"))
View(info)
library("data.table")
library("wigglescout")
library("GenomicRanges")
library("rtracklayer")
# create info table
source("meta.R")
source("meta_unscaled.R")
# ChromHmm bed file
hmm = "../data/bed/ChromHMM_E008_15_coreMarks_hg38lift_noblock_fullnames.bed"
hmm = import(hmm)
result_folder = "../results/"
hmm_hm = function(ptm = "H3K36me3") {
select_samples = function(ptm, gender) {
subset = info %>% filter(status == gender) %>% filter(mark == ptm) %>% arrange(filename) %>% pull(filename)
return(subset)
}
print(ptm)
XX = select_samples(ptm = ptm, gender = "XX")
XX_annot = character()
for (sample in XX) {
temp = str_split(sample, "../data/bigwig/")[[1]][2]
temp1 = str_split(temp, "_")[[1]][1]
temp2 = str_split(temp, "_")[[1]][2]
label = glue("{temp1}_{temp2}_XX")
XX_annot = c(XX_annot, label)
}
XY = select_samples(ptm = ptm, gender = "XY")
XY_annot = character()
for (sample in XY) {
temp = str_split(sample, "../data/bigwig/")[[1]][2]
temp1 = str_split(temp, "_")[[1]][1]
temp2 = str_split(temp, "_")[[1]][2]
label = glue("{temp1}_{temp2}_XY")
XY_annot = c(XY_annot, label)
}
hm = plot_bw_loci_summary_heatmap(c(XX, XY),
labels = c(XX_annot, XY_annot),
loci = hmm)
ggsave(
plot = hm,
filename = glue("{result_folder}{ptm}_unscaled_ChromHMM_heatmap.png"),
width = 10,
height = 8,
dpi = 500,
device = "png"
)
}
# loop through epigenetic marks
marks = unique(info$mark)
marks = marks[!str_detect(marks, "Input")]
sapply(marks, hmm_hm)
library("tidyverse")
library("data.table")
library("glue")
library("biomaRt")
# paths
encode = "../data/ENCODE/"
hg38 = "../data/hg38/"
# hg38
genes = fread(glue("{hg38}genes.gtf"))
# list ENCODE hESC gene quantifications
list.files(encode, full.names = TRUE)
# upper quantile
quantile = 0.95
# read ENCODE hESC data and filter the highly expressing genes
# source: https://www.encodeproject.org/search/?type=Experiment&searchTerm=hESC&assay_title=total+RNA-seq
expr1 = fread(glue("{encode}hESC_RNASeq_gene_quant_ENCFF174OMR_rep1.tsv"))
expr1 = expr1 %>%
dplyr::filter(TPM >= quantile(TPM, quantile)) %>%
arrange(desc(TPM)) %>%
dplyr::filter(str_detect(gene_id, "ENSG")) %>%
separate(gene_id, into = c("ENSEMBL_ID", ".")) %>%
pull(ENSEMBL_ID) %>% unique()
expr2 = fread(glue("{encode}hESC_RNASeq_gene_quant_ENCFF910OBU_rep2.tsv"))
expr2 = expr2 %>%
dplyr::filter(TPM >= quantile(TPM, quantile)) %>%
arrange(desc(TPM)) %>%
dplyr::filter(str_detect(gene_id, "ENSG")) %>%
separate(gene_id, into = c("ENSEMBL_ID", ".")) %>%
pull(ENSEMBL_ID) %>% unique()
active_genes = tibble(ENSEMBL_ID = intersect(expr2, expr1))
# biomaRt annotation
ensembl = useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
active_genes = getBM(
attributes = c('ensembl_gene_id', 'hgnc_symbol'),
filters = 'ensembl_gene_id',
values = active_genes$ENSEMBL_ID,
mart = ensembl
)
# modify gtf file
genes_mod = genes %>%
separate(V9, into = c("temp", "rest"), sep = "\"; gene_name", remove = FALSE) %>%
separate(temp, into = c("temp", "gene_symbol"), sep = "gene_id \"") %>%
dplyr::select(-temp, -rest) %>%
filter(gene_symbol %in% active_genes$hgnc_symbol) %>%
dplyr::select(-gene_symbol)
# export
write_tsv(genes_mod, glue("{hg38}ENCODE_hESC_active_genes.gtf"), col_names = FALSE)
View(genes_mod)
View(genes)
library("tidyverse")
library("data.table")
library("glue")
library("biomaRt")
# paths
encode = "../data/ENCODE/"
hg38 = "../data/hg38/"
# hg38
genes = fread(glue("{hg38}genes.gtf"))
# list ENCODE hESC gene quantifications
list.files(encode, full.names = TRUE)
# upper quantile
quantile = 0.99
# read ENCODE hESC data and filter the highly expressing genes
# source: https://www.encodeproject.org/search/?type=Experiment&searchTerm=hESC&assay_title=total+RNA-seq
expr1 = fread(glue("{encode}hESC_RNASeq_gene_quant_ENCFF174OMR_rep1.tsv"))
expr1 = expr1 %>%
dplyr::filter(TPM >= quantile(TPM, quantile)) %>%
arrange(desc(TPM)) %>%
dplyr::filter(str_detect(gene_id, "ENSG")) %>%
separate(gene_id, into = c("ENSEMBL_ID", ".")) %>%
pull(ENSEMBL_ID) %>% unique()
expr2 = fread(glue("{encode}hESC_RNASeq_gene_quant_ENCFF910OBU_rep2.tsv"))
expr2 = expr2 %>%
dplyr::filter(TPM >= quantile(TPM, quantile)) %>%
arrange(desc(TPM)) %>%
dplyr::filter(str_detect(gene_id, "ENSG")) %>%
separate(gene_id, into = c("ENSEMBL_ID", ".")) %>%
pull(ENSEMBL_ID) %>% unique()
active_genes = tibble(ENSEMBL_ID = intersect(expr2, expr1))
# biomaRt annotation
ensembl = useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
active_genes = getBM(
attributes = c('ensembl_gene_id', 'hgnc_symbol'),
filters = 'ensembl_gene_id',
values = active_genes$ENSEMBL_ID,
mart = ensembl
)
# modify gtf file
genes_mod = genes %>%
separate(V9, into = c("temp", "rest"), sep = "\"; gene_name", remove = FALSE) %>%
separate(temp, into = c("temp", "gene_symbol"), sep = "gene_id \"") %>%
dplyr::select(-temp, -rest) %>%
filter(gene_symbol %in% active_genes$hgnc_symbol) %>%
dplyr::select(-gene_symbol)
# export
write_tsv(genes_mod, glue("{hg38}ENCODE_hESC_active_genes.gtf"), col_names = FALSE)
library("data.table")
library("wigglescout")
library("GenomicRanges")
library("rtracklayer")
library("RColorBrewer")
# create info table
source("meta.R")
# ChromHmm bed file
genes = "../data/hg38/ENCODE_hESC_active_genes.gtf"
genes = import(genes, format = "GTF")
result_folder = "../results/"
# profile plot over hg38 gene set
profile_plot = function(ptm = "H3K36me3") {
select_samples = function(ptm, gender) {
subset = info %>% filter(status == gender) %>% filter(mark == ptm) %>% arrange(filename) %>% pull(filename)
return(subset)
}
print(ptm)
XX = select_samples(ptm = ptm, gender = "XX")
XX_annot = character()
for (sample in XX) {
temp = str_split(sample, "../data/bigwig/")[[1]][2]
temp1 = str_split(temp, "_")[[1]][1]
temp2 = str_split(temp, "_")[[1]][2]
label = glue("{temp1}_{temp2}_XX")
XX_annot = c(XX_annot, label)
}
XY = select_samples(ptm = ptm, gender = "XY")
XY_annot = character()
for (sample in XY) {
temp = str_split(sample, "../data/bigwig/")[[1]][2]
temp1 = str_split(temp, "_")[[1]][1]
temp2 = str_split(temp, "_")[[1]][2]
label = glue("{temp1}_{temp2}_XY")
XY_annot = c(XY_annot, label)
}
p = plot_bw_profile(
c(XX, XY),
loci = genes,
labels = c(XX_annot, XY_annot),
colors = c(brewer.pal(n = 4, name = "Reds"), brewer.pal(n = 4, name = "Blues")),
mode = "start"
)
ggsave(
plot = p,
filename = glue("{result_folder}{ptm}_activeg_profileplot.png"),
width = 10,
height = 8,
dpi = 500,
device = "png"
)
}
# loop through epigenetic marks
marks = unique(info$mark)
marks = marks[!str_detect(marks, "Input")]
sapply(marks, profile_plot)
help(plot_bw_profile)
library("data.table")
library("wigglescout")
library("GenomicRanges")
library("rtracklayer")
library("RColorBrewer")
# create info table
source("meta.R")
# ChromHmm bed file
genes = "../data/hg38/ENCODE_hESC_active_genes.gtf"
genes = import(genes, format = "GTF")
result_folder = "../results/"
# profile plot over hg38 gene set
profile_plot = function(ptm = "H3K36me3") {
select_samples = function(ptm, gender) {
subset = info %>% filter(status == gender) %>% filter(mark == ptm) %>% arrange(filename) %>% pull(filename)
return(subset)
}
print(ptm)
XX = select_samples(ptm = ptm, gender = "XX")
XX_annot = character()
for (sample in XX) {
temp = str_split(sample, "../data/bigwig/")[[1]][2]
temp1 = str_split(temp, "_")[[1]][1]
temp2 = str_split(temp, "_")[[1]][2]
label = glue("{temp1}_{temp2}_XX")
XX_annot = c(XX_annot, label)
}
XY = select_samples(ptm = ptm, gender = "XY")
XY_annot = character()
for (sample in XY) {
temp = str_split(sample, "../data/bigwig/")[[1]][2]
temp1 = str_split(temp, "_")[[1]][1]
temp2 = str_split(temp, "_")[[1]][2]
label = glue("{temp1}_{temp2}_XY")
XY_annot = c(XY_annot, label)
}
p = plot_bw_profile(
c(XX, XY),
loci = genes,
labels = c(XX_annot, XY_annot),
colors = c(brewer.pal(n = 4, name = "Reds"), brewer.pal(n = 4, name = "Blues")),
mode = "start"
) + coord_cartesian(ylim = c(0, 10))
ggsave(
plot = p,
filename = glue("{result_folder}{ptm}_activeg_profileplot.png"),
width = 10,
height = 8,
dpi = 500,
device = "png"
)
}
# loop through epigenetic marks
marks = unique(info$mark)
marks = marks[!str_detect(marks, "Input")]
sapply(marks, profile_plot)
x = fread("../data/hg38/ENCODE_hESC_active_genes.gtf")
View(x)
bed = x %>% select(V1, V4, V5)
bed = x %>% dplyr::select(V1, V4, V5)
View(bed)
write_tsv(bed, "../data/hg38/ENCODE_hESC_active_genes.bed")
write_tsv(bed, "../data/hg38/ENCODE_hESC_active_genes.bed", col_names = FALSE)
library("tidyverse")
library("data.table")
library("glue")
library("biomaRt")
# paths
encode = "../data/ENCODE/"
hg38 = "../data/hg38/"
# hg38
genes = fread(glue("{hg38}genes.gtf"))
# list ENCODE hESC gene quantifications
list.files(encode, full.names = TRUE)
# upper quantile
quantile = 0.99
# read ENCODE hESC data and filter the highly expressing genes
# source: https://www.encodeproject.org/search/?type=Experiment&searchTerm=hESC&assay_title=total+RNA-seq
expr1 = fread(glue("{encode}hESC_RNASeq_gene_quant_ENCFF174OMR_rep1.tsv"))
expr1 = expr1 %>%
dplyr::filter(TPM >= quantile(TPM, quantile)) %>%
arrange(desc(TPM)) %>%
dplyr::filter(str_detect(gene_id, "ENSG")) %>%
separate(gene_id, into = c("ENSEMBL_ID", ".")) %>%
pull(ENSEMBL_ID) %>% unique()
expr2 = fread(glue("{encode}hESC_RNASeq_gene_quant_ENCFF910OBU_rep2.tsv"))
expr2 = expr2 %>%
dplyr::filter(TPM >= quantile(TPM, quantile)) %>%
arrange(desc(TPM)) %>%
dplyr::filter(str_detect(gene_id, "ENSG")) %>%
separate(gene_id, into = c("ENSEMBL_ID", ".")) %>%
pull(ENSEMBL_ID) %>% unique()
active_genes = tibble(ENSEMBL_ID = intersect(expr2, expr1))
# biomaRt annotation
ensembl = useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
active_genes = getBM(
attributes = c('ensembl_gene_id', 'hgnc_symbol'),
filters = 'ensembl_gene_id',
values = active_genes$ENSEMBL_ID,
mart = ensembl
)
# modify gtf file
genes_mod = genes %>%
separate(V9, into = c("temp", "rest"), sep = "\"; gene_name", remove = FALSE) %>%
separate(temp, into = c("temp", "gene_symbol"), sep = "gene_id \"") %>%
dplyr::select(-temp, -rest) %>%
filter(gene_symbol %in% active_genes$hgnc_symbol) %>%
dplyr::select(-gene_symbol)
View(genes_mod)
# export
write_tsv(genes_mod, glue("{hg38}ENCODE_hESC_active_genes.gtf"), col_names = FALSE, quote = FALSE)
# export
write_tsv(genes_mod, glue("{hg38}ENCODE_hESC_active_genes.gtf"), col_names = FALSE, quote = FALSE)
# export
write_tsv(genes_mod, glue("{hg38}ENCODE_hESC_active_genes.gtf"), col_names = FALSE, quote = "none")
genes_mod = genes %>%
separate(V9, into = c("temp", "rest"), sep = "\"; gene_name", remove = FALSE) %>%
separate(temp, into = c("temp", "gene_symbol"), sep = "gene_id \"") %>%
dplyr::select(-temp, -rest)
View(genes_mod)
# export
write.table(genes_mod, glue("{hg38}ENCODE_hESC_active_genes.gtf"), col_names = FALSE, quotes = FALSE, row.names = FALSE)
# export
write.table(genes_mod, glue("{hg38}ENCODE_hESC_active_genes.gtf"), col.names = FALSE,
quote = FALSE,
row.names = FALSE)
# modify gtf file
genes_mod = genes %>%
separate(V9, into = c("temp", "rest"), sep = "\"; gene_name", remove = FALSE) %>%
separate(temp, into = c("temp", "gene_symbol"), sep = "gene_id \"") %>%
dplyr::select(-temp, -rest) %>%
filter(gene_symbol %in% active_genes$hgnc_symbol) %>%
dplyr::select(-gene_symbol)
# export
write.table(genes_mod, glue("{hg38}ENCODE_hESC_active_genes.gtf"), col.names = FALSE,
quote = FALSE,
row.names = FALSE)
+
# export to bed
bed = genes_mod %>% dplyr::select(V1, V4, V5)
write_tsv(bed, glue("{hg38}ENCODE_hESC_active_genes.bed"), col_names = FALSE)
# export
write.table(genes_mod, glue("{hg38}ENCODE_hESC_active_genes.gtf"), col.names = FALSE,
quote = FALSE,
row.names = FALSE)
# export
write.table(genes_mod, glue("{hg38}ENCODE_hESC_active_genes.gtf"), col.names = FALSE,
quote = FALSE,
row.names = FALSE)
# export to bed
bed = genes_mod %>% dplyr::select(V1, V4, V5)
write_tsv(bed, glue("{hg38}ENCODE_hESC_active_genes.bed"), col_names = FALSE)
library("tidyverse")
library("data.table")
library("glue")
library("edgeR")
library("EnhancedVolcano")
library("GenomicRanges")
library("rtracklayer")
library("wigglescout")
# create info table
source("meta.R")
# turn off scientific notations and warnings
options(scipen = 999)
options(warn = -1)
# folders
result_folder = "../results/"
data_folder = "../data/"
# ChromHmm bed file
hmm = "../data/bed/ChromHMM_E008_15_coreMarks_hg38lift_noblock_fullnames.bed"
hmm = import(hmm)
# minute scaling factors
sf = fread(glue("{data_folder}minute_pooled_scalinginfo.txt"))
# read count estimator
fragment_length = 150
bin = 10000
# read count estimator
read_est = bin / fragment_length
# we do not normalize to the corresponding input here rather we bin the bigwigs
binning = function(mark = "../data/bigwig/H3K4me1_1001_pooled.hg38.scaled.bw",
bin_size = bin) {
bw_bins(mark,
bin_size = bin_size,
selection = hmm,
genome = "hg38")
}
# create a tibble with the input normalize values
create_edgeR_input = function(mark, bin_size = bin) {
sample = str_split(mark, bigwig_path)[[1]][2]
sample = str_split(sample, "_")[[1]][2]
print(glue("bigwig: {mark}"))
print(glue("sample: {sample} - input: {input}"))
binned = binning(mark = mark, bin_size = bin_size)
binned = as.data.frame(binned)
binned = binned %>% select(-seqnames, -start, -end, -width, -strand)
return(binned)
}
# extract genomic ranges (first 5 columns) for a given bin size
get_ranges = function(mark = "../data/bigwig/H3K4me1_1001_pooled.hg38.scaled.bw",
bin_size = bin) {
df = binning(mark = mark, bin_size = bin_size)
df = as.data.frame(df)
ranges = df %>% select(seqnames, start, end, width, strand)
return(ranges)
}
# bigwigs_inputs
bigwigs_marks
# loop through epigenetic data
binned_data = lapply(bigwigs_marks[1:2], create_edgeR_input)
# create a tibble with the input normalize values
create_edgeR_input = function(mark, bin_size = bin) {
sample = str_split(mark, bigwig_path)[[1]][2]
sample = str_split(sample, "_")[[1]][2]
print(glue("bigwig: {mark}"))
print(glue("sample: {sample}"))
binned = binning(mark = mark, bin_size = bin_size)
binned = as.data.frame(binned)
binned = binned %>% select(-seqnames, -start, -end, -width, -strand)
return(binned)
}
# loop through epigenetic data
binned_data = lapply(bigwigs_marks[1:2], create_edgeR_input)
binned_data
binned_data = bind_cols(binned_data)
ranges = get_ranges()
binned_data = cbind(ranges, binned_data)
library("tidyverse")
library("data.table")
library("glue")
library("edgeR")
library("EnhancedVolcano")
library("GenomicRanges")
library("rtracklayer")
library("wigglescout")
# create info table
source("meta.R")
# turn off scientific notations and warnings
options(scipen = 999)
options(warn = -1)
# folders
result_folder = "../results/edgeR/"
data_folder = "../data/hg38/"
# ChromHmm bed file
actives = "../data/hg38/ENCODE_hESC_active_genes.bed"
actives = import(actives)
